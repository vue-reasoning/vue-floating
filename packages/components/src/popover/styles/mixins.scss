@use 'sass:list' as list;
@use 'sass:meta' as meta;
@use 'sass:map' as map;

@use '../../theme-utils';
@import 'config';

//
// Namespace
//

@mixin popover($blocks...) {
  @if list.length($blocks) > 0 {
    @each $block in $blocks {
      .#{$popover-cls}-#{$block} {
        @content;
      }
    }
  } @else {
    .#{$popover-cls} {
      @content;
    }
  }
}

//
// Variables
//

@function get-popover-css-var-value($prop, $theme: $default-theme) {
  @return get-css-var-value($popover-variables, $prop, $theme);
}

@function get-popover-css-var-value-dark($prop) {
  @return get-css-var-value($popover-variables, $prop, $variable-key-theme-dark);
}

@mixin use-popover-css-var-declare($theme: $default-theme, $props...) {
  $normalized: normalize-theme-and-props($theme, $props...);

  @include use-css-var-declare(
    $popover-variables,
    map.get($normalized, 'theme'),
    map.get($normalized, map.get($normalized, 'props'))...
  );
}

@mixin use-popover-css-var-declare-dark($props...) {
  @include use-popover-css-var-declare($variable-key-theme-dark, $props...);
}

@mixin use-popover-var-style($theme: $default-theme, $props...) {
  $normalized: normalize-theme-and-props($theme, $props...);

  @each $prop in map.get($normalized, 'props') {
    #{get-css-prop($popover-variables, $prop)}: get-css-var-value(
      $popover-variables,
      $prop,
      map.get($normalized, 'theme')
    );
  }
}

@mixin use-popover-var-style-dark($props...) {
  @include use-popover-var-style($variable-key-theme-dark, $props...);
}

//
// Theme
//

@mixin popover-with-dark($blocks...) {
  .#{$popover-cls}.#{$theme-cls-dark} {
    @if list.length($blocks) > 0 {
      @include popover($blocks...) {
        @content;
      }
    } @else {
      @content;
    }
  }
}

@mixin popover-with-theme-style($block, $props) {
  @include popover($block) {
    @content;

    @include use-popover-var-style($props...);
  }

  @include popover-with-dark($block) {
    @include use-popover-var-style-dark($props...);
  }
}

//
// Placement
//

@mixin popover-with-placement($placement: '') {
  @include with-placement($placement, '.' + $popover-cls) {
    @content;
  }
}

//
// Arrow
//

@mixin arrow-in-popover-with-placement($placement: '') {
  @include popover-with-placement($placement) {
    @include popover(arrow) {
      @content;
    }
  }
}

//
// Size
//

@function get-popover-size-selector($size) {
  @return '.size-' + $size;
}

@mixin popover-with-size($size) {
  .#{$popover-cls}#{get-popover-size-selector($size)} {
    @content;
  }
}
